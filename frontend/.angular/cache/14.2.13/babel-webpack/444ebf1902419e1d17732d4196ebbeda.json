{"ast":null,"code":"// Simple caching for constant-radius points.\nlet cacheDigits, cacheAppend, cacheRadius, cacheCircle;\nexport default class PathString {\n  constructor(digits) {\n    this._append = digits == null ? append : appendRound(digits);\n    this._radius = 4.5;\n    this._ = \"\";\n  }\n\n  pointRadius(_) {\n    this._radius = +_;\n    return this;\n  }\n\n  polygonStart() {\n    this._line = 0;\n  }\n\n  polygonEnd() {\n    this._line = NaN;\n  }\n\n  lineStart() {\n    this._point = 0;\n  }\n\n  lineEnd() {\n    if (this._line === 0) this._ += \"Z\";\n    this._point = NaN;\n  }\n\n  point(x, y) {\n    switch (this._point) {\n      case 0:\n        {\n          this._append`M${x},${y}`;\n          this._point = 1;\n          break;\n        }\n\n      case 1:\n        {\n          this._append`L${x},${y}`;\n          break;\n        }\n\n      default:\n        {\n          this._append`M${x},${y}`;\n\n          if (this._radius !== cacheRadius || this._append !== cacheAppend) {\n            const r = this._radius;\n            const s = this._;\n            this._ = \"\"; // stash the old string so we can cache the circle path fragment\n\n            this._append`m0,${r}a${r},${r} 0 1,1 0,${-2 * r}a${r},${r} 0 1,1 0,${2 * r}z`;\n            cacheRadius = r;\n            cacheAppend = this._append;\n            cacheCircle = this._;\n            this._ = s;\n          }\n\n          this._ += cacheCircle;\n          break;\n        }\n    }\n  }\n\n  result() {\n    const result = this._;\n    this._ = \"\";\n    return result.length ? result : null;\n  }\n\n}\n\nfunction append(strings) {\n  let i = 1;\n  this._ += strings[0];\n\n  for (const j = strings.length; i < j; ++i) {\n    this._ += arguments[i] + strings[i];\n  }\n}\n\nfunction appendRound(digits) {\n  const d = Math.floor(digits);\n  if (!(d >= 0)) throw new RangeError(`invalid digits: ${digits}`);\n  if (d > 15) return append;\n\n  if (d !== cacheDigits) {\n    const k = 10 ** d;\n    cacheDigits = d;\n\n    cacheAppend = function append(strings) {\n      let i = 1;\n      this._ += strings[0];\n\n      for (const j = strings.length; i < j; ++i) {\n        this._ += Math.round(arguments[i] * k) / k + strings[i];\n      }\n    };\n  }\n\n  return cacheAppend;\n}","map":{"version":3,"names":["cacheDigits","cacheAppend","cacheRadius","cacheCircle","PathString","constructor","digits","_append","append","appendRound","_radius","_","pointRadius","polygonStart","_line","polygonEnd","NaN","lineStart","_point","lineEnd","point","x","y","r","s","result","length","strings","i","j","arguments","d","Math","floor","RangeError","k","round"],"sources":["/home/boriskiva/PycharmProjects/Strategy_game/strategy_game/frontend/node_modules/d3-geo/src/path/string.js"],"sourcesContent":["// Simple caching for constant-radius points.\nlet cacheDigits, cacheAppend, cacheRadius, cacheCircle;\n\nexport default class PathString {\n  constructor(digits) {\n    this._append = digits == null ? append : appendRound(digits);\n    this._radius = 4.5;\n    this._ = \"\";\n  }\n  pointRadius(_) {\n    this._radius = +_;\n    return this;\n  }\n  polygonStart() {\n    this._line = 0;\n  }\n  polygonEnd() {\n    this._line = NaN;\n  }\n  lineStart() {\n    this._point = 0;\n  }\n  lineEnd() {\n    if (this._line === 0) this._ += \"Z\";\n    this._point = NaN;\n  }\n  point(x, y) {\n    switch (this._point) {\n      case 0: {\n        this._append`M${x},${y}`;\n        this._point = 1;\n        break;\n      }\n      case 1: {\n        this._append`L${x},${y}`;\n        break;\n      }\n      default: {\n        this._append`M${x},${y}`;\n        if (this._radius !== cacheRadius || this._append !== cacheAppend) {\n          const r = this._radius;\n          const s = this._;\n          this._ = \"\"; // stash the old string so we can cache the circle path fragment\n          this._append`m0,${r}a${r},${r} 0 1,1 0,${-2 * r}a${r},${r} 0 1,1 0,${2 * r}z`;\n          cacheRadius = r;\n          cacheAppend = this._append;\n          cacheCircle = this._;\n          this._ = s;\n        }\n        this._ += cacheCircle;\n        break;\n      }\n    }\n  }\n  result() {\n    const result = this._;\n    this._ = \"\";\n    return result.length ? result : null;\n  }\n}\n\nfunction append(strings) {\n  let i = 1;\n  this._ += strings[0];\n  for (const j = strings.length; i < j; ++i) {\n    this._ += arguments[i] + strings[i];\n  }\n}\n\nfunction appendRound(digits) {\n  const d = Math.floor(digits);\n  if (!(d >= 0)) throw new RangeError(`invalid digits: ${digits}`);\n  if (d > 15) return append;\n  if (d !== cacheDigits) {\n    const k = 10 ** d;\n    cacheDigits = d;\n    cacheAppend = function append(strings) {\n      let i = 1;\n      this._ += strings[0];\n      for (const j = strings.length; i < j; ++i) {\n        this._ += Math.round(arguments[i] * k) / k + strings[i];\n      }\n    };\n  }\n  return cacheAppend;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}