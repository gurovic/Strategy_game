# Generated by Django 4.2.9 on 2024-04-17 10:31

import app.models.game
import datetime
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('invoker', '__first__'),
    ]

    operations = [
        migrations.CreateModel(
            name='Battle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time_start', models.DateTimeField(auto_now_add=True)),
                ('time_finish', models.DateTimeField(auto_now_add=True)),
                ('status', models.TextField(choices=[('NOT_STARTED', 'Ns'), ('OK', 'Ok'), ('ERROR', 'Er')], default='NOT_STARTED')),
                ('logs', models.FileField(blank=True, upload_to='')),
            ],
        ),
        migrations.CreateModel(
            name='Game',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='', max_length=50)),
                ('number_of_players', models.IntegerField(default=0, verbose_name='Number of players')),
                ('ideal_solution', models.FileField(null=True, upload_to=app.models.game.user_directory_path, verbose_name='Ideal strategy')),
                ('play', models.FileField(null=True, upload_to=app.models.game.user_directory_path, verbose_name='Play')),
                ('win_point', models.IntegerField(blank=True, default=0, null=True, verbose_name='Point for winner')),
                ('lose_point', models.IntegerField(blank=True, default=0, null=True, verbose_name='Point for loser')),
                ('visualiser', models.FileField(blank=True, null=True, upload_to=app.models.game.user_directory_path, verbose_name='Visualiser')),
                ('rules', models.FileField(blank=True, null=True, upload_to=app.models.game.user_directory_path, verbose_name='Rules')),
            ],
        ),
        migrations.CreateModel(
            name='JuryReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('story_of_game', models.TextField(blank=True, null=True, verbose_name='Ход игры')),
                ('points', models.JSONField(blank=True, null=True, verbose_name='Очки игроков')),
                ('status', models.IntegerField(blank=True, choices=[(1, 'Ok'), (0, 'Error')], null=True, verbose_name='Статус боя')),
            ],
        ),
        migrations.CreateModel(
            name='PlayerInTournament',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number_of_points', models.FloatField(default=0, verbose_name='number of point')),
                ('place', models.IntegerField(default=0, verbose_name='place')),
                ('file_solution', models.FileField(null=True, upload_to='player_in_tournament_files', verbose_name='file')),
                ('player', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='player')),
            ],
        ),
        migrations.CreateModel(
            name='Tournament',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='tournament', max_length=255, verbose_name='Name')),
                ('system', models.IntegerField(choices=[(0, 'Round Robin')], default=0, verbose_name='Tournament System')),
                ('status', models.IntegerField(choices=[(0, 'Not Started'), (1, 'Waiting Solutions'), (2, 'In Progress'), (3, 'Finished')], default=0, verbose_name='Status')),
                ('finish_registration_time', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True, verbose_name='Finish Registration Time')),
                ('tournament_start_time', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True, verbose_name='Tournament Start Time')),
                ('max_of_players', models.IntegerField(default=2, verbose_name='Maximum number of players')),
                ('battles', models.ManyToManyField(blank=True, to='app.battle', verbose_name='Battle')),
                ('game', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='app.game', verbose_name='Game')),
                ('players', models.ManyToManyField(blank=True, through='app.PlayerInTournament', to=settings.AUTH_USER_MODEL, verbose_name='Players')),
            ],
        ),
        migrations.CreateModel(
            name='PlayersInBattle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.IntegerField(default=0, verbose_name='Номер в батле')),
                ('number_of_points', models.FloatField(default=0, verbose_name='number of point')),
                ('place', models.IntegerField(default=0, verbose_name='place')),
                ('file_solution', models.FileField(null=True, upload_to='player_in_battle_files', verbose_name='file')),
                ('battle', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='app.battle')),
                ('player', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='playerintournament',
            name='tournament',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='app.tournament', verbose_name='tournament'),
        ),
        migrations.CreateModel(
            name='CompilerReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('compiled_file', models.FileField(blank=True, null=True, upload_to='compiler_report', verbose_name='Файл')),
                ('time', models.DurationField(default=datetime.timedelta, verbose_name='Время выполнения')),
                ('datetime_created', models.DateTimeField(auto_now_add=True, verbose_name='Время создания')),
                ('status', models.IntegerField(choices=[(0, 'Ok'), (1, 'Compiler Error'), (2, 'Compilation Error'), (3, 'Timelimit')], default=0, verbose_name='Статус')),
                ('error', models.TextField(blank=True, editable=False, null=True, verbose_name='Ошибка')),
                ('invoker_report', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='invoker.invokerreport', verbose_name='Репорт инвокера')),
            ],
            options={
                'verbose_name': 'Репорт компилятора',
                'verbose_name_plural': 'Репорты компилятора',
            },
        ),
        migrations.AddField(
            model_name='battle',
            name='game',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='app.game'),
        ),
        migrations.AddField(
            model_name='battle',
            name='jury_report',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='app.juryreport'),
        ),
        migrations.AddField(
            model_name='battle',
            name='players',
            field=models.ManyToManyField(blank=True, through='app.PlayersInBattle', to=settings.AUTH_USER_MODEL),
        ),
    ]
